name: kunit-build

on:
  workflow_call:
    inputs:
      WORKFLOW_REPO:
        required: true
        type: string
        description: 工作流脚本仓库

      WORKFLOW_REF:
        required: true
        type: string
        description: 工作流脚本分支
        
      kernel_src_repo:
        type: string
        required: true
        description: '内核源码仓库'
      fetch_ref:
        type: string
        required: true
        description: '内核分支或sha值'
      issue_id:
        type: string
        required: false
      download_server: 
        type: string
        required: false
        default: 10.213.6.54
      download_server_dir: 
        type: string
        required: false
        default: '/usr/share/nginx/html/download/kernel-build-results'
    
    outputs:
      kernel_download_url:
        value: ${{ jobs.kernel-build.outputs.kernel_download_url }}
      summary_content:
        value: ${{ jobs.kernel-build.outputs.summary_content }}
    
    # secrets:
    #   sshkey_content: 
    #     required: true
    #     description: '上传内核所需ssh私钥'

jobs:
  kernel-build:
    runs-on: 'action-runner-9950x-196.2'
    container:
      image: 'hub.oepkgs.net/oerv-ci/rava-action-runner:latest'
    outputs:
      kernel_download_url: ${{ steps.upload-kernel.outputs.artifact-url }}
      summary_content: ${{ steps.summary.outputs.summary_content }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_ID: ${{ inputs.issue_id }}
      REPO: ${{ inputs.kernel_src_repo }}
      download_server: ${{ inputs.download_server }}
      download_server_dir: ${{ inputs.download_server_dir }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.WORKFLOW_REPO }}
          ref: ${{ inputs.WORKFLOW_REF }}
      
      - name: checkout kernel-src
        env:
          GIT_FETCH_DEPTH: 1
        run: |
            rm -rf kernel-src || true
            mkdir kernel-src
            (cd kernel-src && bash ../src/git-fetch-in-dir.sh "${{ inputs.fetch_ref }}")
      
      # - name: before
      #   env:
      #     ADD_LABEL: kernel_building
      #     COMMENT_CONTENT: start kernel build
      #   run: bash gh_actions/run.sh || true

      - name: run kernel build
        id: kernel-build
        env:
          kernel_result_dir: kernel-result
        run: |
          (
          cd "kernel-src"
          export ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu-
          make distclean
          make openeuler_defconfig
          make Image -j$(nproc)
          make modules -j$(nproc)
          make dtbs -j$(nproc)

          make INSTALL_MOD_PATH="$kernel_result_dir" modules_install -j$(nproc)
          mkdir -p "$kernel_result_dir/dtb/thead"
          cp vmlinux "$kernel_result_dir"
          cp arch/riscv/boot/Image "$kernel_result_dir/kernel.zip"
          install -m 644 $(find arch/riscv/boot/dts/ -name "*.dtb") "$kernel_result_dir"/dtb
          mv $(find arch/riscv/boot/dts/ -name "th1520*.dtb") "$kernel_result_dir"/dtb/thead
          )

          echo "suffix=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
      - name: upload kernel
        id: upload-kernel
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.issue_id || '0' }}-${{ steps.kernel-build.outputs.suffix }}.zip
          if-no-files-found: error
          path: kernel-src/kernel-result/kernel.zip
      
      - name: summary
        if: ${{ always() }}
        id: summary
        env:
          kernel_url: ${{ steps.upload-kernel.outputs.artifact-url }}
        continue-on-error: true
        run: |
          result=$(if [ "$kernel_url" != "" ]; then echo "Kernel build succeed. [$kernel_url]($kernel_url)"; else echo "Kernel build failed!"; fi)
          cat >> summary << EEE
          ## Kernel Build Result
          
          $result
          EEE
          cat summary > $GITHUB_STEP_SUMMARY
          
          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

