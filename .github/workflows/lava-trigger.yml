name: lava-trigger

on:
  workflow_call:
    outputs:
      summary_content:
        value: ${{ jobs.collect-summary.outputs.summary_content }}

    inputs:
      kernel_download_url:
        description: '内核下载链接'
        type: string
        required: true
        
      rootfs_download_url:
        description: 'rootfs下载链接'
        required: false
        type: string
        default: "https://fast-mirror.isrc.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/RVCK/openEuler24.03-LTS-SP1/openeuler-rootfs.img.zst"

      testcase_repo:
        description: 'lava 仓库地址, {owner}/{repo}'
        required: true
        type: string

      testcase_ref:
        description: 'lava 仓库sha值'
        required: false
        type: string

      lava_template:
        description: 'lava测试模板'
        required: true
        type: string

      testcase_url:
        description: '需要执行的用例yaml 文件路径'
        required: true
        type: string

      # testcase_params:
      #   description: '测试用例参数,[key=value ...]'
      #   type: string
      #   required: false
    
    secrets:
      lava_token:
        required: true

env:
  testcase_repo: ${{ inputs.testcase_repo }}
  testcase_ref: ${{ inputs.testcase_ref }}
  kernel_download_url: ${{ inputs.kernel_download_url }}
  rootfs_download_url: ${{ inputs.rootfs_download_url }}
  lava_template: ${{ inputs.lava_template }}
  testcase_url: ${{ inputs.testcase_url }}
  lava_server: lava.oerv.ac.cn
  lava_admin_token: ${{ secrets.lava_token }}
  
jobs:
  lava-trigger:
    outputs:
      lava_jobid: ${{ steps.run_lava_check.outputs.lava_jobid }}
    runs-on: 'ubuntu-latest'

    steps:
      - name: install depends
        run: |
          sudo apt-get update
          sudo apt-get install lavacli

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.testcase_repo }}
          ref: ${{ inputs.testcase_ref || 'main' }}

      - name: gen var
        id: gen_var
        env:
          github_repo: ${{ github.repository }}
          event_name: ${{ github.event_name }}
          issue_id: ${{ github.event.pull_request.number || github.event.issue_comment.number || github.event.issue.number }}
        run: |
          echo "ssh_port=$(od -An -N2 -i /dev/urandom | awk -v min=10000 -v max=20000 '{print min + ($1 % (max - min + 1))}')" >> $GITHUB_OUTPUT
          qemu_job_name="${github_repo/\//_}_${event_name}_${issue_id:-"$(date +"%Y%m%d")"}"
          echo "qemu_job_name=$qemu_job_name" >> $GITHUB_OUTPUT
          echo "testitem_name=${qemu_job_name}_$(echo "${testcase_url}" | awk -F'/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: setup_lava_template
        shell: python3 {0}
        env:
          ssh_port: ${{ steps.gen_var.outputs.ssh_port }}
          qemu_job_name: ${{ steps.gen_var.outputs.qemu_job_name }}
          testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
        run: |
          import yaml
          import os

          testcase_repo = os.getenv("testcase_repo", "")
          assert testcase_repo, "Testcase repository is not set"

          testcase_ref = os.getenv("testcase_ref", "")

          lava_template = os.getenv("lava_template")
          assert lava_template, "Lava template is not set"

          testcase_url = os.getenv("testcase_url")
          assert testcase_url, "Testcase URL is not set"

          qemu_job_name = os.getenv("qemu_job_name")
          assert qemu_job_name, "QEMU job name is not set"

          testitem_name = os.getenv("testitem_name")
          assert testitem_name, "testitem_name is not set"

          ssh_port = os.getenv("ssh_port")
          assert ssh_port, "SSH port is not set"

          kernel_download_url = os.getenv("kernel_download_url")
          assert kernel_download_url, "Kernel download URL is not set"

          rootfs_download_url = os.getenv("rootfs_download_url")
          assert rootfs_download_url, "Rootfs download URL is not set"

          def parse_yaml(file_path):
              with open(file_path, "r") as file:
                  content = file.read()
                  return yaml.safe_load(content)

          data =  parse_yaml(lava_template)
          data["job_name"] = qemu_job_name
          data['context']['extra_options'] = [i.replace('hostfwd=tcp::10001-:22', f'hostfwd=tcp::{ssh_port}-:22') for i in list(data['context']['extra_options'])]
          data['actions'][0]['deploy']['images']['kernel']['url'] = kernel_download_url
          data['actions'][0]['deploy']['images']['rootfs']['url'] = rootfs_download_url
          data['actions'][2]['test']['definitions'][0]['repository'] = f"https://github.com/{testcase_repo}.git"
          if len(testcase_ref):
              data['actions'][2]['test']['definitions'][0]['rivision'] = testcase_ref
          data['actions'][2]['test']['definitions'][0]['name'] = f'{testitem_name}_{data["device_type"]}' 
          data['actions'][2]['test']['definitions'][0]['path'] = testcase_url
          data['actions'][2]['test']['definitions'][0].pop('parameters', None)

          with open(lava_template, 'w') as f:
              f.write(yaml.dump(data))

      - name: run lava check
        id: run_lava_check
        env:
          qemu_job_name: ${{ steps.gen_var.outputs.qemu_job_name }}
          testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
        shell: bash
        run: |
          cat $lava_template
          set -ex
          lava_jobid=$(lavacli --uri https://${{ secrets.lava_token }}@${lava_server}/RPC2/ jobs submit ${lava_template})
          if [[ ! "$lava_jobid" =~ ^[0-9]+$ ]]; then echo "$lava_jobid"; exit 1; fi
          echo "lava_jobid=$lava_jobid" >> $GITHUB_OUTPUT

  lava-result:
    needs: [lava-trigger]
    if: ${{ needs.lava-trigger.outputs.lava_jobid }}
    runs-on: 'ubuntu-latest'
    strategy:
      max-parallel: 1
      matrix:
        wait: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]
    steps:
      - id: check-result
        uses: actions/cache@v4.2.3
        with:
          path: is_lava_finish.txt
          # An explicit key for restoring and saving the cache
          key: is_lava_finish
          # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
          lookup-only: true
      
      - name: install depends
        if: ${{ steps.check-result.outputs.cache-hit == false }}
        run: |
          sudo apt-get update
          sudo apt-get install lavacli

      - name: wait-result ${{ matrix.wait }}
        id: wait-result
        if: ${{ steps.check-result.outputs.cache-hit == false }}
        env:
          lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
        continue-on-error: true
        run: |
          set -x
          while true; do
            lava_state=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs show ${lava_jobid} | grep 'state ' | awk '{print $NF}')
            if [ "$lava_state" = 'Running' ] || [ "$lava_state" = Submitted ]; then
              lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs wait --polling 60 ${lava_jobid} || true
            else
              echo "is_lava_finish=true" >> $GITHUB_OUTPUT
              echo "$lava_state" > is_lava_finish.txt
            fi
          done

      - name: set-result
        if: ${{ steps.wait-result.outputs.is_lava_finish }}
        uses: actions/cache@v4.2.3
        with:
          key: is_lava_finish
          path: is_lava_finish.txt
          
  on-cancel:
    runs-on: 'ubuntu-latest'
    needs: [lava-trigger, lava-result]
    if: ${{ cancelled() }}
    env: 
      lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
    steps:
      - run: |
          set -x
          if [ "$lava_jobid" != "" ]; then
            lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs cancel ${lava_jobid}
          fi

  collect-summary:
    outputs:
      summary_content: ${{ steps.summary.outputs.summary_content }}
    runs-on: 'ubuntu-latest'
    needs: [lava-trigger, lava-result]
    if: ${{ needs.lava-trigger.outputs.lava_jobid && !cancelled() }}
    env: 
      lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
    steps:
      - name: install depends
        run: |
          sudo apt-get update
          sudo apt-get install lavacli

      - id: summary
        shell: bash
        run: |
          set -x
          lava_health=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs show ${lava_jobid} | grep 'Health ' | awk '{print $NF}')
          lava_results=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ results ${lava_jobid} || echo "")
        
          declare -A cnt_result_status=()
          while read -r st; do
            if [ "$st" = "" ]; then continue; fi
            cnt_result_status[$st]=$((cnt_result_status[$st] + 1))
          done < <(awk '{print $3}' <<< "$lava_results")

          result_status_desc=""
          for st in "${!cnt_result_status[@]}"; do
            result_status_desc+="${result_status_desc:+, }$st: ${cnt_result_status[$st]}"
          done

          cat > summary << EEE
          ## LAVA Check
          
          ### args:
          
          - testcase_repo: ${testcase_repo}
          - testcase_ref: ${testcase_ref}
          - lava_template: ${lava_template}
          - testcase_url: ${testcase_url}
          - kernel_download_url: ${kernel_download_url}
          - rootfs_download_url: ${rootfs_download_url}
          
          ### result:
          
          $(if [ "${lava_health}" = Complete ]; then echo "Lava check done!"; else echo "Lava check fail!"; fi) lava log: https://${lava_server}/scheduler/job/${lava_jobid}

          lava result count: $result_status_desc

          EEE

          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          cat > $GITHUB_STEP_SUMMARY << EEE
          $(cat summary)
          
          ### detail result:

          \`\`\`log
          $lava_results
          \`\`\`

          ### setuped template
          \`\`\`log
          $(cat $lava_template)
          \`\`\`

          EEE
