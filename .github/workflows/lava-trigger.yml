name: lava-trigger

on:
  workflow_call:
    outputs:
      summary_content:
        value: ${{ jobs.lava-trigger.outputs.summary_content }}

    inputs:
      kernel_download_url:
        description: '内核下载链接'
        type: string
        required: true
        
      rootfs_download_url:
        description: 'rootfs下载链接'
        required: false
        type: string
        default: "https://fast-mirror.isrc.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/RVCK/openEuler24.03-LTS-SP1/openeuler-rootfs.img"

      testcase_repo:
        description: 'lava 仓库地址, {owner}/{repo}'
        required: true
        type: string

      testcase_ref:
        description: 'lava 仓库分支'
        required: false
        type: string
        default: "main"

      lava_template:
        description: 'lava测试模板'
        required: true
        type: string

      testcase_url:
        description: '需要执行的用例yaml 文件路径'
        required: true
        type: string

      # testcase_params:
      #   description: '测试用例参数,[key=value ...]'
      #   type: string
      #   required: false
    
    secrets:
      lava_token:
        required: true

env:
  testcase_repo: ${{ inputs.testcase_repo }}
  testcase_ref: ${{ inputs.testcase_ref }}
  kernel_download_url: ${{ inputs.kernel_download_url }}
  rootfs_download_url: ${{ inputs.rootfs_download_url }}
  lava_template: ${{ inputs.lava_template }}
  testcase_url: ${{ inputs.testcase_url }}
  lava_server: lava.oerv.ac.cn
  
jobs:
  lava-trigger:
    outputs:
      summary_content: ${{ steps.summary.outputs.summary_content }}
    runs-on: 'ubuntu-latest'

    steps:
      - name: install depends
        run: |
          sudo apt-get update
          sudo apt-get install lavacli yq

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.testcase_repo }}
          ref: ${{ inputs.testcase_ref }}

      - name: gen var
        id: gen_var
        env:
          github_repo: ${{ github.repository }}
          event_name: ${{ github.event_name }}
          ref_name: ${{ github.ref_name }}
        run: |
          echo "ssh_port=$(od -An -N2 -i /dev/urandom | awk -v min=10000 -v max=20000 '{print min + ($1 % (max - min + 1))}')" >> $GITHUB_OUTPUT
          qemu_job_name="${github_repo/\//_}_${event_name}_${ref_name/\//_}"
          echo "qemu_job_name=$qemu_job_name" >> $GITHUB_OUTPUT
          echo "testitem_name=${qemu_job_name}_$(t="${lava_template##*/}"; echo "${t%.*}")_$(t="${testcase_url##*/}"; echo "${t%.*}")" >> $GITHUB_OUTPUT

      - name: setup_lava_template
        shell: python3 {0}
        env:
          ssh_port: ${{ steps.gen_var.outputs.ssh_port }}
          qemu_job_name: ${{ steps.gen_var.outputs.qemu_job_name }}
          testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
        run: |
          import yaml
          import os

          testcase_repo = os.getenv("testcase_repo", "")
          assert testcase_repo, "Testcase repository is not set"

          testcase_ref = os.getenv("testcase_ref", "")
          assert testcase_ref, "Testcase ref is not set"

          lava_template = os.getenv("lava_template")
          assert lava_template, "Lava template is not set"

          testcase_url = os.getenv("testcase_url")
          assert testcase_url, "Testcase URL is not set"

          qemu_job_name = os.getenv("qemu_job_name")
          assert qemu_job_name, "QEMU job name is not set"

          testitem_name = os.getenv("testitem_name")
          assert testitem_name, "testitem_name is not set"

          ssh_port = os.getenv("ssh_port")
          assert ssh_port, "SSH port is not set"

          kernel_download_url = os.getenv("kernel_download_url")
          assert kernel_download_url, "Kernel download URL is not set"

          rootfs_download_url = os.getenv("rootfs_download_url")
          assert rootfs_download_url, "Rootfs download URL is not set"

          def parse_yaml(file_path):
              with open(file_path, "r") as file:
                  content = file.read()
                  return yaml.safe_load(content)

          data =  parse_yaml(lava_template)
          data["job_name"] = qemu_job_name
          data['context']['extra_options'] = [i.replace('hostfwd=tcp::10001-:22', f'hostfwd=tcp::{ssh_port}-:22') for i in list(data['context']['extra_options'])]
          data['actions'][0]['deploy']['images']['kernel']['url'] = kernel_download_url
          data['actions'][0]['deploy']['images']['rootfs']['url'] = rootfs_download_url
          data['actions'][2]['test']['definitions'][0]['repository'] = testcase_repo
          data['actions'][2]['test']['definitions'][0]['branch'] = testcase_ref
          data['actions'][2]['test']['definitions'][0]['name'] = f'{testitem_name}_{data["device_type"]}'
          data['actions'][2]['test']['definitions'][0]['path'] = testcase_url
          data['actions'][2]['test']['definitions'][0].pop('parameters', None)

          with open(lava_template, 'w') as f:
              f.write(yaml.dump(data))

      - name: run lava check
        id: run_lava_check
        shell: bash
        env:
          lava_admin_token: ${{ secrets.lava_token }}
          lavacli_max_retry: 5
          lavacli_retry_delay: 30
          qemu_job_name: ${{ steps.gen_var.outputs.qemu_job_name }}
          testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
        run: |
          lavacli_admim(){
              command=$1
              option=$2
              if [ "${option}" = "show" ];then
                option=${option}" --yaml"
              elif [ ${option} = "wait" ];then
                option=${option}" --polling 30"
              fi
              jobid=$3
              lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ ${command} ${option} ${jobid}
          }

          lava_jobid=$(lavacli_admim jobs submit ${lava_template})

          for _i in $(seq 1 ${lavacli_max_retry}); do
              echo " lavacli jobs wait try ${_i} ..."
              lavacli_admim jobs wait ${lava_jobid} && break
              if [ ${_i} -lt ${lavacli_max_retry} ]; then
                  echo "wait ${lavacli_retry_delay} second then retry.."
                  sleep ${lavacli_retry_delay}
              else
                  echo "reach retry maximum number. lavacli jobs wait error!"
                  exit 1
              fi
          done

          sleep 5
          echo "lava_result_url=https://${lava_server}/results/${lava_jobid}/0_${testitem_name}" >> $GITHUB_OUTPUT
          echo "lava_result=$(lavacli_admim jobs show ${lava_jobid} | yq .health)" >> $GITHUB_OUTPUT
          if [ "${lava_result}" != "Complete" ];then
            exit 1
          fi
          


      
      - name: summary
        id: summary
        if: ${{ !cancelled() }}
        env:
          lava_result_url: ${{ steps.run_lava_check.outputs.lava_result_url }}
          lava_result: ${{ steps.run_lava_check.outputs.lava_result }}
        run: |
          

          cat > summary << EEE
          ## LAVA Check
          
          - testcase_repo: ${testcase_repo}
          - testcase_ref: ${testcase_ref}
          - lava_template: ${lava_template}
          - testcase_url: ${testcase_url}
          - kernel_download_url: ${kernel_download_url}
          - rootfs_download_url: ${rootfs_download_url}
          
          $(if [ "${lava_result}" = "Complete" ]; then echo "Lava check done!"; else echo "Lava check fail!"; fi) result url: ${lava_result_url}

          EEE

          
          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          cat > $GITHUB_STEP_SUMMARY << EEE
          $(cat summary)

          ### setupd template:
          
          \`\`\`yaml
          $(cat "${lava_template}")
          \`\`\`
          EEE